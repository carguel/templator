#!/usr/bin/env ruby

if RUBY_VERSION < "1.9"
  require "rubygems"
end

lib_dir=File.expand_path(File.join(File.dirname(__FILE__), '../lib'))
$LOAD_PATH.unshift(lib_dir) unless $LOAD_PATH.include?(lib_dir)

require "thor"
require "templator/parameters"
require "templator/actions"


class TemplatorCli < Thor
  include Thor::Actions
  include Templator::Actions


  # Root directory to prepend to relative paths
  source_root(Dir.pwd)

  #
  # THOR TASK gen
  # Generate a file from a template
  # 
  desc "gen TEMPLATE OUTPUT", "Generate a file from a template"
  method_option "parameter-files", 
                :aliases => "-p", 
                :type => :array, 
                :desc => "list of files and directories, that defines parameters"
  method_option "context", 
                :aliases => '-c', 
                :type => :string, 
                :desc => "context name prepended to parameter name from template (action <%=param name%>)"
  def gen(template, output)
    
    @template = template

    if options.has_key?("parameter-files")
      begin
        @parameters = Templator::Parameters.load_files *options["parameter-files"]
      rescue Exception => e
        error e
        exit 1
      end
    end

    template template, output
  end

  
  #
  # THOR TASK get_param
  # Get the value of a parameter from provided parameter files.
  # 
  desc "get_param PARAMETER_NAME", "Get a parameter value"
  method_option "parameter-files", 
                :aliases => "-p", 
                :required => true, 
                :type => :array, 
                :desc => "list of files and directories, that defines parameters"
  method_option "context", 
                :aliases => '-c', 
                :type => :string, 
                :desc => "context name prepended to parameter name from template (action <%=param name%>)"
  def get_param(parameter_name)

      if options.has_key?("parameter-files")
        @parameters = Templator::Parameters.load_files *options["parameter-files"]
      end

      begin
        puts param(parameter_name)
      rescue
        STDERR.puts "%{parameter_name} is not defined"
        exit 1
      end

      exit 0
  end


  #
  # Internal methods
  #
  no_tasks do

    def parameters
      @parameters
    end

    def context
      @options["context"]
    end

    def search_path
      [File.expand_path(File.dirname(@template))]
    end

    def method_missing(method, *args)
      @parameters.get(method)
    end
  end
end

TemplatorCli.start
